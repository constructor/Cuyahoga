<?xml version="1.0" encoding="utf-8" ?>
<project name="Cuyahoga" default="build" basedir="." xmlns="http://nant.sf.net/release/0.85/nant.xsd">
	<property name="root.dir" value="." />
	<include buildfile="${root.dir}/common.xml" />

	<fileset id="buildfiles.all">
		<!-- Files have to be in dependency order -->
		<include name="Core/Cuyahoga.Core.build" />
		<include name="ServerControls/Cuyahoga.ServerControls.build" />
		<include name="Web/Cuyahoga.Web.build" />
		<include name="Modules/Cuyahoga.Modules.build" />
		<include name="Cuyahoga.Modules.Articles/Cuyahoga.Modules.Articles.build" />
		<include name="Cuyahoga.Modules.Downloads/Cuyahoga.Modules.Downloads.build" />
		<include name="Cuyahoga.Modules.RemoteContent/Cuyahoga.Modules.RemoteContent.build" />
		<include name="Cuyahoga.Modules.Forum/Cuyahoga.Modules.Forum.build" />
		<include name="Cuyahoga.Modules.Flash/Cuyahoga.Modules.Flash.build" />
	</fileset>

	<fileset id="buildfiles.deploy">
		<!-- Include all buildfiles here that have a deploy target -->
		<include name="Web/Cuyahoga.Web.build" />
		<include name="Modules/Cuyahoga.Modules.build" />
		<include name="Cuyahoga.Modules.Articles/Cuyahoga.Modules.Articles.build" />
		<include name="Cuyahoga.Modules.Downloads/Cuyahoga.Modules.Downloads.build" />
		<include name="Cuyahoga.Modules.RemoteContent/Cuyahoga.Modules.RemoteContent.build" />
		<include name="Cuyahoga.Modules.Forum/Cuyahoga.Modules.Forum.build" />
		<include name="Cuyahoga.Modules.Flash/Cuyahoga.Modules.Flash.build" />
	</fileset>

	<target name="build" 
		depends="init copy-referenced-assemblies" 
		description="Builds Cuyahoga in the current configuration">
		
		<nant target="build">
			<buildfiles refid="buildfiles.all" />
		</nant>
		
	</target>

	<target name="rebuild" description="Rebuilds Cuyahoga in the current configuration" depends="init recreate-build-directory build" />

	<target name="init" depends="common.init">
		<mkdir dir="${build.dir}" />
		<call target="common.find-svninfo" />
	</target>

	<target name="clean" description="Deletes current build artifacts" depends="common.init">
		<delete dir="${build.dir}" failonerror="false" />
		<delete>
			<fileset basedir="${build.base.dir}">
				<include name="*.*" />
			</fileset>
		</delete>
	</target>

	<target name="cleanall" description="Deletes all build artifacts" depends="common.init">
		<echo message="Deleting all builds from all configurations" />
		<delete dir="${build.base.dir}" failonerror="false" />
		<call target="clean-vs" />
	</target>

	<target name="recreate-build-directory">
		<echo message="Current Directory is ${project::get-base-directory()}" />
		<echo message="Build Directory is ${build.dir}" />

		<!-- Prepare build directory -->
		<delete dir="${build.dir}" failonerror="false" />
		<mkdir dir="${build.dir}" />
		<call target="copy-referenced-assemblies" />
		<property name="build.rebuild" value="true" />
	</target>

	<target name="copy-referenced-assemblies">
		<!-- Copy framework-neutral libraries -->
		<copy todir="${build.bin.dir}" >
			<fileset basedir="${lib.dir}">
				<include name="*.dll" />
				<include name="*.xml" />
				<include name="*.license.txt" />
			</fileset>

		</copy>
		<!-- Copy family-specific libraries -->
		<!-- 
			The build of log4net works just fine for all versions of .NET.
			When they do get framework specific extensions then we
			can just move them to the framework specific section
		-->
		<copy todir="${build.bin.dir}">
			<fileset basedir="${lib.family.dir}">
				<include name="*.dll" />
				<include name="*.xml" />
				<include name="*.license.txt" />
			</fileset>
		</copy>

		<!-- Copy framework-specific libraries -->
		<copy todir="${build.bin.dir}">
			<fileset basedir="${lib.framework.dir}">
				<include name="*.dll" />
				<include name="*.xml" />
				<include name="*.license.txt" />
			</fileset>
		</copy>
	</target>
	<target name="generate-assemblyinfo"
		depends="init"
		description="Generate AssemblyInfo files">

		<property name="visual-studio" value="true" />
		<nant target="generate-assemblyinfo">
			<buildfiles refid="buildfiles.all" />
		</nant>
	</target>

	<target name="build-all-frameworks" depends="init">
		<!-- Save the current framework -->
		<property name="current.framework.saved" value="${nant.settings.currentframework}" />

		<!-- Execute build for each framework -->
		<foreach item="String" delim=" " property="framework" in="net-2.0 mono-2.0">
			<call target="set-${framework}-framework-configuration" />
			<call target="build" />
		</foreach>

		<!-- Reset the current framework to the saved value -->
		<call target="set-${current.framework.saved}-framework-configuration" />
	</target>

	<target name="deploy" depends="build" description="Deploys the website to the deployment directory">
		<nant target="deploy">
			<buildfiles refid="buildfiles.deploy" />
		</nant>
		<copy todir="${build.dir}">
			<fileset>
				<include name="*.txt" />
			</fileset>
		</copy>
	</target>

	<target name="sdkdoc" depends="init" description="Generates MSDN style documentation">
		<mkdir dir="${build.dir}/doc/sdk" />
		<ndoc>
			<assemblies basedir="${build.dir}/bin">
				<include name="Cuyahoga.*.dll" />
			</assemblies>
			<documenters>
				<documenter name="MSDN">
					<property name="OutputDirectory" value="${build.dir}/doc/sdk" />
					<property name="HtmlHelpName" value="CuyahogaReference" />
					<property name="IncludeFavorites" value="False" />
					<property name="Title" value="Cuyahoga Class Library - v.${project.version}" />
					<property name="SplitTOCs" value="False" />
					<property name="DefaulTOC" value="" />
					<property name="IncludeHierarchy" value="True" />
					<property name="ShowVisualBasic" value="False" />
					<property name="RootPageContainsNamespaces" value="True" />
					<property name="SortTOCByNamespace" value="True" />
					<property name="OutputTarget" value="HtmlHelp" />
					<property name="HeaderHtml" value="" />
					<property name="FooterHtml" value="" />
					<property name="FilesToInclude" value="" />
					<property name="LinkToSdkDocVersion" value="SDK_v1_1" />
					<property name="ShowMissingSummaries" value="True" />
					<property name="ShowMissingRemarks" value="False" />
					<property name="ShowMissingParams" value="False" />
					<property name="ShowMissingReturns" value="False" />
					<property name="ShowMissingValues" value="False" />
					<property name="DocumentInternals" value="False" />
					<property name="DocumentProtected" value="True" />
					<property name="DocumentPrivates" value="False" />
					<property name="DocumentProtectedInternalAsProtected" value="False" />
					<property name="DocumentEmptyNamespaces" value="False" />
					<property name="IncludeAssemblyVersion" value="True" />
					<property name="CopyrightText" value="" />
					<property name="CopyrightHref" value="" />
					<property name="ReferencesPath" value="" />
					<property name="SkipNamespacesWithoutSummaries" value="False" />
					<property name="UseNamespaceDocSummaries" value="False" />
					<property name="AutoPropertyBackerSummaries" value="False" />
					<property name="AutoDocumentConstructors" value="True" />
					<property name="DocumentAttributes" value="True" />
					<property name="ShowTypeIdInAttributes" value="False" />
					<property name="DocumentedAttributes" value="True" />
					<property name="GetExternalSummaries" value="True" />
					<property name="EditorBrowsableFilter" value="Off" />
					<property name="UseNDocXmlFile" value="" />
				</documenter>
			</documenters>
		</ndoc>
		<delete>
			<!-- remove all of the html, gif, etc... files and leave only the chm -->
			<fileset basedir="${build.dir}/doc/sdk">
				<include name="*" />
				<exclude name="*.chm" />
			</fileset>
		</delete>
	</target>
		
	<target name="package-source" depends="init" description="Create a Zip file for Source Releases">
		<mkdir dir="${build.dir}/package" />
		<copy todir="${build.dir}/package" includeemptydirs="true">
			<fileset>
				<include name="Cuyahoga.*" />
				<include name="*.txt" />
				<include name="*.xml" />
				<include name="${lib.dir}/**" />
				<include name="Core/**" />
				<include name="ServerControls/**" />
				<include name="Web/**" />
				<include name="Modules/**" />
				<include name="Downloads/**" />
				<include name="Cuyahoga.Modules.Articles/**" />
				<include name="Cuyahoga.Modules.Downloads/**" />
				<include name="Cuyahoga.Modules.RemoteContent/**" />
				<include name="Cuyahoga.Modules.Forum/**" />
				<include name="Cuyahoga.Modules.Flash/**" />
				<include name="Tests/**" />
				<include name="doc/**/*.pdf" />
				<include name="Database/**" /> <!-- obsolete scripts, for upgrade only -->
				<exclude name="Web/Modules/**/*" />
				<exclude name="Web/files/**/*" />
				<exclude name="Web/log/**/*" />
				<exclude name="Web/index/**/*" />
				<!-- exclude VS.NET stuff -->
				<exclude name="**/*.suo" />
				<exclude name="**/*j.user" />
				<exclude name="**/bin/**" />
				<exclude name="**/obj/**" />
			</fileset>
		</copy>
		<property name="project.zip-path" value="build/${project::get-name()}-${project.major}.${project.minor}.${project.build}-src.zip" />
		<zip zipfile="${project.zip-path}" includeemptydirs="true">
			<fileset basedir="${build.dir}/package">
				<include name="**/*" />
			</fileset>
		</zip>
		<!-- delete the directory that was used to create the zip -->
		<delete dir="${build.dir}/package" />
	</target>
	<target name="package-bin" depends="deploy" description="Create a Zip file for Binary Releases">
		<copy todir="${build.dir}" includeemptydirs="true">
			<fileset>
				<include name="*.txt" />
			</fileset>
		</copy>
		<property name="project.binary-zip-path" value="build/${project::get-name()}-${project.major}.${project.minor}.${project.build}-bin.zip" />
		<zip zipfile="${project.binary-zip-path}" includeemptydirs="true">
			<fileset basedir="${build.dir}">
				<include name="**/*" />
			</fileset>
		</zip>
	</target>
</project>
