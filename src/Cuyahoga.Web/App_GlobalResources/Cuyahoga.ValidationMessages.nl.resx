<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CategoryDescriptionValidatorLength" xml:space="preserve">
    <value>Omschrijving categorie moet tussen de 1 en 255 tekens bevatten</value>
  </data>
  <data name="CategoryNameValidatorLength" xml:space="preserve">
    <value>Naam categorie moet tussen de 1 en 100 tekens bevatten</value>
  </data>
  <data name="CategoryNameValidatorNonEmpty" xml:space="preserve">
    <value>Naam categorie is verplicht</value>
  </data>
  <data name="CategorySiteValidatorNonEmpty" xml:space="preserve">
    <value>De categorie moet gerelateerd zijn aan een site</value>
  </data>
  <data name="ContentItemPublishedAtValidatorDateTime" xml:space="preserve">
    <value>Ongeldige datum/tijd</value>
  </data>
  <data name="ContentItemPublishedUntilValidatorDateTime" xml:space="preserve">
    <value>Ongeldige datum/tijd</value>
  </data>
  <data name="ContentItemPublishedUntilValidatorGreaterThanPublishedAt" xml:space="preserve">
    <value>Publicatiedatum moet voor de publicatie einddatum liggen</value>
  </data>
  <data name="ContentItemSummaryValidatorLength" xml:space="preserve">
    <value>Samenvatting moet tussen de 1 en 255 tekens bevatten</value>
  </data>
  <data name="ContentItemTitleValidatorLength" xml:space="preserve">
    <value>Titel is verplicht</value>
  </data>
  <data name="ContentItemTitleValidatorNonEmpty" xml:space="preserve">
    <value>Titel moet tussen de 1 en 100 tekens bevatten</value>
  </data>
  <data name="DefaultCultureValidatorNonEmpty" xml:space="preserve">
    <value>Standaard culture is verplicht</value>
  </data>
  <data name="DefaultRoleValidatorNonEmpty" xml:space="preserve">
    <value>Standaard rol is verplicht</value>
  </data>
  <data name="EmailValidatorEmail" xml:space="preserve">
    <value>Ongelig e-mailadres</value>
  </data>
  <data name="EmailValidatorLength" xml:space="preserve">
    <value>E-mailadres moet tussen de 1 en 100 tekens bevatten</value>
  </data>
  <data name="EmailValidatorNonEmpty" xml:space="preserve">
    <value>E-mailadres is verplicht</value>
  </data>
  <data name="FirstNameValidatorLength" xml:space="preserve">
    <value>Voornaam moet tussen de 1 en 100 tekens bevatten</value>
  </data>
  <data name="LastNameValidatorLength" xml:space="preserve">
    <value>Achternaam moet tussen de 1 en 100 tekens bevatten</value>
  </data>
  <data name="MetaDescriptionValidatorLength" xml:space="preserve">
    <value>Meta description kan max. 100 tekens bevatten</value>
  </data>
  <data name="MetaKeywordsValidatorLength" xml:space="preserve">
    <value>Meta keywords kan max. 100 tekens bevatten</value>
  </data>
  <data name="NodeCultureValidatorNonEmpty" xml:space="preserve">
    <value>De culture is verplicht</value>
  </data>
  <data name="NodeLinkUrlValidatorLength" xml:space="preserve">
    <value>De link url moet tussen de 1 en 255 tekens bevatten</value>
  </data>
  <data name="NodeLinkUrlValidatorPattern" xml:space="preserve">
    <value>De link url is geen geldige hyperlink</value>
  </data>
  <data name="NodeShortDescriptionValidatorLength" xml:space="preserve">
    <value>De SEO-vriendelijke url moet tussen de 1 en 255 tekens bevatten</value>
  </data>
  <data name="NodeShortDescriptionValidatorNonEmpty" xml:space="preserve">
    <value>De SEO-vriendelijke url is verplicht</value>
  </data>
  <data name="NodeTitleValidatorLength" xml:space="preserve">
    <value>De paginatitel moet tussen de 1 en 255 tekens bevatten</value>
  </data>
  <data name="NodeTitleValidatorNonEmpty" xml:space="preserve">
    <value>De paginatitel is verplicht</value>
  </data>
  <data name="PasswordConfirmationValidatorNonEmpty" xml:space="preserve">
    <value>Bevestiging wachtwoord is verplicht</value>
  </data>
  <data name="PasswordValidatorLength" xml:space="preserve">
    <value>Wachtwoord moet minimaal 5 tekens bevatten</value>
  </data>
  <data name="PasswordValidatorNonEmpty" xml:space="preserve">
    <value>Wachtwoord is verplicht</value>
  </data>
  <data name="PasswordValidatorSameAs" xml:space="preserve">
    <value>Wachtwoord en bevestiging wachtwoord moeten gelijk zijn</value>
  </data>
  <data name="PlaceholderValidatorLength" xml:space="preserve">
    <value>Placeholder kan max. 100 tekens bevatten</value>
  </data>
  <data name="RoleNameValidatorLength" xml:space="preserve">
    <value>Naam moet tussen de 1 en 50 tekens bevatten</value>
  </data>
  <data name="RoleNameValidatorNonEmpty" xml:space="preserve">
    <value>Naam is verplicht</value>
  </data>
  <data name="RoleNameValidatorNotUnique" xml:space="preserve">
    <value>Een rol met deze naam bestaat al (mogelijk in een andere site)</value>
  </data>
  <data name="RolesValidatorNotEmpty" xml:space="preserve">
    <value>Een gebruiker moet tenminste 1 rol hebben</value>
  </data>
  <data name="SectionTitleValidatorLength" xml:space="preserve">
    <value>De titel moet tussen de 1 en 100 tekens bevatten</value>
  </data>
  <data name="SectionTitleValidatorNonEmpty" xml:space="preserve">
    <value>De titel is verplicht</value>
  </data>
  <data name="SiteNameValidatorLength" xml:space="preserve">
    <value>Site naam moet tussen de 1 en 100 tekens bevatten</value>
  </data>
  <data name="SiteNameValidatorNonEmpty" xml:space="preserve">
    <value>Site naam is verplicht</value>
  </data>
  <data name="SiteUrlValidatorLength" xml:space="preserve">
    <value>Site url moet tussen de 12 en 100 tekens bevatten</value>
  </data>
  <data name="SiteUrlValidatorNonEmpty" xml:space="preserve">
    <value>Site url is verplicht</value>
  </data>
  <data name="SiteUrlValidatorPattern" xml:space="preserve">
    <value>Ongeldige site url (moet beginnen met http:// of https://)</value>
  </data>
  <data name="TemplateNameValidatorLength" xml:space="preserve">
    <value>Templatenaam moet tussen de 1 en 100 tekens bevatten</value>
  </data>
  <data name="TemplateNameValidatorNonEmpty" xml:space="preserve">
    <value>Templatenaam is verplicht</value>
  </data>
  <data name="UserNameValidatorLength" xml:space="preserve">
    <value>Gebruikersnaam moet tussen de 1 en 100 tekens bevatten</value>
  </data>
  <data name="UserNameValidatorNonEmpty" xml:space="preserve">
    <value>Gebruikersnaam is verplicht</value>
  </data>
  <data name="UserNameValidatorNotUnique" xml:space="preserve">
    <value>Er bestaat al een gebruiker met deze gebruikersnaam</value>
  </data>
  <data name="WebsiteValidatorLength" xml:space="preserve">
    <value>Website url moet tussen de 1 en 100 tekens bevatten</value>
  </data>
</root>