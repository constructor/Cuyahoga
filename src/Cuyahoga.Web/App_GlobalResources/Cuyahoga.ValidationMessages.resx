<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CategoryDescriptionValidatorLength" xml:space="preserve">
    <value>The category description must be between 1 and 255 characters</value>
  </data>
  <data name="CategoryNameValidatorLength" xml:space="preserve">
    <value>The category name must be between 1 and 100 characters</value>
  </data>
  <data name="CategoryNameValidatorNonEmpty" xml:space="preserve">
    <value>The category name may not be empty</value>
  </data>
  <data name="CategorySiteValidatorNonEmpty" xml:space="preserve">
    <value>The category must be connected to a site</value>
  </data>
  <data name="ContentItemPublishedAtValidatorDateTime" xml:space="preserve">
    <value>Invalid date/time</value>
  </data>
  <data name="ContentItemPublishedUntilValidatorDateTime" xml:space="preserve">
    <value>Invalid date/time</value>
  </data>
  <data name="ContentItemPublishedUntilValidatorGreaterThanPublishedAt" xml:space="preserve">
    <value>Publish date must be before Publish end date</value>
  </data>
  <data name="ContentItemSummaryValidatorLength" xml:space="preserve">
    <value>The summary must be between 1 and 255 characters</value>
  </data>
  <data name="ContentItemTitleValidatorLength" xml:space="preserve">
    <value>The title must be between 1 and 100 characters</value>
  </data>
  <data name="ContentItemTitleValidatorNonEmpty" xml:space="preserve">
    <value>The title may not be empty</value>
  </data>
  <data name="DefaultCultureValidatorNonEmpty" xml:space="preserve">
    <value>A default culture is required</value>
  </data>
  <data name="DefaultRoleValidatorNonEmpty" xml:space="preserve">
    <value>A default role is required</value>
  </data>
  <data name="EmailValidatorEmail" xml:space="preserve">
    <value>Invalid e-mail address</value>
  </data>
  <data name="EmailValidatorLength" xml:space="preserve">
    <value>E-mail address must be between 1 and 100 characters</value>
  </data>
  <data name="EmailValidatorNonEmpty" xml:space="preserve">
    <value>E-mail address may not be empty</value>
  </data>
  <data name="FirstNameValidatorLength" xml:space="preserve">
    <value>The firstname must be between 1 and 100 characters</value>
  </data>
  <data name="LastNameValidatorLength" xml:space="preserve">
    <value>The lastname must be between 1 and 100 characters</value>
  </data>
  <data name="MetaDescriptionValidatorLength" xml:space="preserve">
    <value>Meta description can contain max. 500 characters</value>
  </data>
  <data name="MetaKeywordsValidatorLength" xml:space="preserve">
    <value>Meta keywords can contain max. 500 characters</value>
  </data>
  <data name="NodeCultureValidatorNonEmpty" xml:space="preserve">
    <value>The culture is required</value>
  </data>
  <data name="NodeLinkUrlValidatorLength" xml:space="preserve">
    <value>The link url must be between 1 and 255 characters</value>
  </data>
  <data name="NodeLinkUrlValidatorPattern" xml:space="preserve">
    <value>The link url is not a valid hyperlink</value>
  </data>
  <data name="NodeShortDescriptionValidatorLength" xml:space="preserve">
    <value>The friendly url must be between 1 and 255 characters</value>
  </data>
  <data name="NodeShortDescriptionValidatorNonEmpty" xml:space="preserve">
    <value>The friendly url is required</value>
  </data>
  <data name="NodeTitleValidatorLength" xml:space="preserve">
    <value>The page title must be between 1 and 255 characters</value>
  </data>
  <data name="NodeTitleValidatorNonEmpty" xml:space="preserve">
    <value>The page title may not be empty</value>
  </data>
  <data name="PasswordConfirmationValidatorNonEmpty" xml:space="preserve">
    <value>The password confirmation may not be empty</value>
  </data>
  <data name="PasswordValidatorLength" xml:space="preserve">
    <value>The password must contain at least 5 characters</value>
  </data>
  <data name="PasswordValidatorNonEmpty" xml:space="preserve">
    <value>The password may not be empty</value>
  </data>
  <data name="PasswordValidatorSameAs" xml:space="preserve">
    <value>The password must be the same as the confirmation password</value>
  </data>
  <data name="PlaceholderValidatorLength" xml:space="preserve">
    <value>The placeholder can contain max. 100 characters</value>
  </data>
  <data name="RoleNameValidatorLength" xml:space="preserve">
    <value>The name must be between 1 and 50 characters</value>
  </data>
  <data name="RoleNameValidatorNonEmpty" xml:space="preserve">
    <value>The role name may not be empty</value>
  </data>
  <data name="RoleNameValidatorNotUnique" xml:space="preserve">
    <value>A role with this name already exists (possibly in another site)</value>
  </data>
  <data name="RolesValidatorNotEmpty" xml:space="preserve">
    <value>A user must at least have one role</value>
  </data>
  <data name="SectionTitleValidatorLength" xml:space="preserve">
    <value>The title must be between 1 and 100 characters</value>
  </data>
  <data name="SectionTitleValidatorNonEmpty" xml:space="preserve">
    <value>The title may not be empty</value>
  </data>
  <data name="SiteNameValidatorLength" xml:space="preserve">
    <value>The site name must be between 1 and 100 characters</value>
  </data>
  <data name="SiteNameValidatorNonEmpty" xml:space="preserve">
    <value>The site name may not be empty</value>
  </data>
  <data name="SiteUrlValidatorLength" xml:space="preserve">
    <value>The site url must be between 12 and 100 characters</value>
  </data>
  <data name="SiteUrlValidatorNonEmpty" xml:space="preserve">
    <value>The site url may not be empty</value>
  </data>
  <data name="SiteUrlValidatorPattern" xml:space="preserve">
    <value>Invalid site url (must begin with http:// or https://)</value>
  </data>
  <data name="TemplateNameValidatorLength" xml:space="preserve">
    <value>The template name must be between 1 and 100 characters</value>
  </data>
  <data name="TemplateNameValidatorNonEmpty" xml:space="preserve">
    <value>The template name may not be empty</value>
  </data>
  <data name="UserNameValidatorLength" xml:space="preserve">
    <value>The username must be between 1 and 50 characters</value>
  </data>
  <data name="UserNameValidatorNonEmpty" xml:space="preserve">
    <value>The username may not be empty</value>
  </data>
  <data name="UserNameValidatorNotUnique" xml:space="preserve">
    <value>A user with this username already exists</value>
  </data>
  <data name="WebsiteValidatorLength" xml:space="preserve">
    <value>The website url must be between 1 and 100 characters</value>
  </data>
</root>